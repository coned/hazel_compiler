import Array from "array"
import WasmI32 from "runtime/unsafe/wasmi32"

@disableGC
let array_to_number = (arr : Array<Number>) => {
    WasmI32.toGrain(WasmI32.fromGrain(arr)) : Number
}

@disableGC
let number_to_array = (num : Number) => {
    WasmI32.toGrain(WasmI32.fromGrain(num)) : (Array<Number>)
}

export enum BoolOp {And, Or};
let _TAG_BOOLOP_AND_ : Number = 0;
let _TAG_BOOLOP_OR_ : Number = 1;


let _TAG_BoolLit_ : Number = 0;
let _TAG_BinBoolOp_ : Number = 1;

export let buildBoolLit = (x : Bool) => {
    let ret = Array.make(2, 0);
    ret[0] = _TAG_BoolLit_;
    ret[1] = if(x) {1} else {0};
    ret
}

export let buildBinBoolOp = (op : BoolOp, x, y) => {
    let ret = Array.make(4, 0);
    ret[0] = _TAG_BinBoolOp_;
    ret[1] = if(op == And) {_TAG_BOOLOP_AND_} else {_TAG_BOOLOP_OR_};
    ret[2] = array_to_number(x);
    ret[3] = array_to_number(y);
    ret
}
