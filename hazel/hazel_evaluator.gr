import * from "./hazel_util"
import * from "./hazel_tag"
import * from "./hazel_builder"
import Array from "array"

let fff = (x : Number) => {
    x + 5
}

let evaluatorArr = Array.make(8, fff)

@disableGC
export let rec evaluate = (prog) => {
    if (is_unevaluated(prog)) {
        let arr = del_eval_tag(prog)
        let tag = arr[0]
        (evaluatorArr[tag])(prog)
    } else {
        prog
    }
}

@disableGC
let evaluateBoolLit = (prog) => {
    print("evaluateBoolLit")
    let arr = del_eval_tag(prog)
    boxed(arr)
}

@disableGC
let evaluateEmptyHole = (prog) => {
    print("evaluateEmptyHole")
    let arr = del_eval_tag(prog)
    indet(arr)
}

@disableGC
let evaluateBinBoolOp = (prog) => {
    print("evaluateBinBoolOp")
    let arr = del_eval_tag(prog)
    arr[2] = evaluate(arr[2])
    arr[3] = evaluate(arr[3])
    if (is_boxed(arr[2]) && is_boxed(arr[3])) {
        let arr1 = del_eval_tag(arr[2])
        let arr2 = del_eval_tag(arr[3])
        if (arr[1] == _TAG_BOOLOP_AND_) {
            let result = arr1[1] * arr2[1]
            let ret = buildBoolLit(result == 1)
            boxed(del_eval_tag(ret))
        } else if (arr[1] == _TAG_BOOLOP_OR_) {
            let result = (arr1[1] + arr2[1]) % 2
            let ret = buildBoolLit(result == 1)
            boxed(del_eval_tag(ret))
        } else {
            indet(arr) // TODO: ERROR
        }
    } else {
        indet(arr)
    }
}

export let init_evaluatorArr = () => {
    evaluatorArr[_TAG_BoolLit_] = evaluateBoolLit
    evaluatorArr[_TAG_BinBoolOp_] = evaluateBinBoolOp
    evaluatorArr[_TAG_EmptyHole_] = evaluateEmptyHole
}


function and() {
    @wasm.and
}

check two oprands and wasm.and
