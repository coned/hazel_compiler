import Array from "array"
import WasmI32 from "runtime/unsafe/wasmi32"
import { coerceNumberToWasmI32 } from "runtime/numbers"
import PrintWasm from "runtime/unsafe/printWasm"
import * from "syntax_tree"
import Gc from "runtime/gc"

@disableGC
export let rec to_number = (arr0 : DHExp) => {
    let arr = WasmI32.fromGrain(arr0)
    let arr = WasmI32.add(arr, 4n)
    let ret = WasmI32.toGrain(arr) : Number
    Gc.decRef(WasmI32.fromGrain(arr0))
    ret
}

@disableGC
export let rec to_DHExp = (x : Number) => {
    let arr = WasmI32.fromGrain(x)
    let arr = WasmI32.sub(arr, 4n)
    let ret = WasmI32.toGrain(arr) : (DHExp)
    //Gc.decRef(WasmI32.fromGrain(x))
    ret
}

@disableGC
export let rec bool_to_number = (b0 : Bool) => {
    let b = WasmI32.fromGrain(b0)
    let ret = WasmI32.toGrain(b) : (Number)
    Gc.decRef(WasmI32.fromGrain(b0))
    ret
}

@disableGC
export let rec to_bool = (x : Number) => {
    let arr = WasmI32.fromGrain(x)
    let ret = WasmI32.toGrain(arr) : (Bool)
    Gc.decRef(WasmI32.fromGrain(x))
    ret
}

@disableGC
export let rec is_indet = (x : Number) => {
    let addr = WasmI32.fromGrain(x)
    let addr = WasmI32.remU(addr, 8n)
    let ret = WasmI32.eq(addr, 4n)
    Gc.decRef(WasmI32.fromGrain(x))
    ret
}

@disableGC
export let rec is_const = (x : Number) => {
    let addr = WasmI32.fromGrain(x)
    let addr = WasmI32.remU(addr, 8n)
    let ret = WasmI32.eq(addr, 6n)
    Gc.decRef(WasmI32.fromGrain(x))
    ret
}
