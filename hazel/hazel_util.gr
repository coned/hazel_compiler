import Array from "array"
import WasmI32 from "runtime/unsafe/wasmi32"
import { coerceNumberToWasmI32 } from "runtime/numbers"
import PrintWasm from "runtime/unsafe/printWasm"
import * from "syntax_tree"

@disableGC
export let to_number = (arr : DHExp) => {
    let arr = WasmI32.fromGrain(arr)
    let arr = WasmI32.add(arr, 2n)
    WasmI32.toGrain(arr) : Number
}

@disableGC
export let to_DHExp = (x : Number) => {
    let arr = WasmI32.fromGrain(x)
    let arr = WasmI32.sub(arr, 2n)
    WasmI32.toGrain(arr) : (DHExp)
}

@disableGC
export let bool_to_number = (b : Bool) => {
    let b = WasmI32.fromGrain(b)
    WasmI32.toGrain(b) : (Number)
}

@disableGC
export let to_bool = (x : Number) => {
    let arr = WasmI32.fromGrain(x)
    WasmI32.toGrain(arr) : (Bool)
}

@disableGC
export let is_indet = (x : Number) => {
    let addr = WasmI32.fromGrain(x)
    let addr = WasmI32.remU(addr, 8n)
    WasmI32.eq(addr, 2n)
}

@disableGC
export let is_const = (x : Number) => {
    let addr = WasmI32.fromGrain(x)
    let addr = WasmI32.remU(addr, 8n)
    WasmI32.eq(addr, 6n)
}
