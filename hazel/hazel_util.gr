import Array from "array"
import WasmI32 from "runtime/unsafe/wasmi32"
import { coerceNumberToWasmI32 } from "runtime/numbers"
import PrintWasm from "runtime/unsafe/printWasm"

@disableGC
export let unevaluated = (arr : Array<Number>) => {
    let addr = WasmI32.fromGrain(arr)
    let addr = WasmI32.add(addr, 1n) // toGrain() will check whether it is a number
    let addr = WasmI32.toGrain(addr) : Number
    addr
}

@disableGC
export let boxed = (arr : Array<Number>) => {
    let addr = WasmI32.fromGrain(arr)
    let addr = WasmI32.add(addr, 3n) // toGrain() will check whether it is a number
    let addr = WasmI32.toGrain(addr) : Number
    addr
}

@disableGC
export let indet = (arr : Array<Number>) => {
    let addr = WasmI32.fromGrain(arr)
    let addr = WasmI32.add(addr, 7n) // toGrain() will check whether it is a number
    let addr = WasmI32.toGrain(addr) : Number
    addr
}

@disableGC
export let is_unevaluated = (x : Number) => {
    let addr = WasmI32.fromGrain(x)
    let addr = WasmI32.remS(addr, 8n)
    WasmI32.eq(addr, 1n)
}

@disableGC
export let is_boxed = (x : Number) => {
    let addr = WasmI32.fromGrain(x)
    let addr = WasmI32.remS(addr, 8n)
    WasmI32.eq(addr, 3n)
}

@disableGC
export let is_indet = (x : Number) => {
    let addr = WasmI32.fromGrain(x)
    let addr = WasmI32.remS(addr, 8n)
    WasmI32.eq(addr, 7n)
}

@disableGC
export let del_eval_tag = (num : Number) => {
    let addr = WasmI32.fromGrain(num);
    let addr = WasmI32.and(addr, 0xFFFFFFF8n);
    WasmI32.toGrain(addr) : (Array<Number>)
}

